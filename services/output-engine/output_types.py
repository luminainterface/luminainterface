from dataclasses import dataclass
from typing import Dict, List, Any, Optional
from datetime import datetime

@dataclass
class GeneratedOutput:
    """Output generated by the engine with metadata."""
    text: str
    audio_path: str
    turn_ms: int  # Latency in milliseconds
    excerpt: str  # Short preview of the output
    confidence: float  # Confidence score (0-1)
    metadata: Dict[str, Any]
    generated_at: datetime
    reward: int = 0  # Reward counter, incremented on positive feedback

@dataclass
class ConceptPayload:
    """Payload for concept updates in Qdrant."""
    term: str
    definition: str
    embedding: List[float]
    metadata: Dict[str, Any]
    reward: int
    last_updated: datetime
    usage_count: int
    license_type: Optional[str] = None
    novelty_score: Optional[float] = None

@dataclass
class RewardUpdate:
    """Message for updating concept rewards."""
    term: str
    increment: int = 1
    reason: Optional[str] = None
    timestamp: datetime = datetime.utcnow()

@dataclass
class TrainerVectorBatch:
    """Batch of vectors for training, with chunking support."""
    vectors: List[Dict[str, Any]]
    batch_id: str
    total_vectors: int
    chunk_index: int
    total_chunks: int
    metadata: Dict[str, Any]
    timestamp: datetime = datetime.utcnow() 