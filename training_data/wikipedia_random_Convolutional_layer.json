{
  "title": "Convolutional layer",
  "source": "Wikipedia (Random Fetch)",
  "source_url": "https://en.wikipedia.org/wiki/Convolutional_layer",
  "content": "In artificial neural networks, a convolutional layer is a type of network layer that applies a convolution operation to the input. Convolutional layers are some of the primary building blocks of convolutional neural networks (CNNs), a class of neural network most commonly applied to images, video, audio, and other data that have the property of uniform translational symmetry.[1]\n\nThe convolution operation in a convolutional layer involves sliding a small window (called a kernel or filter) across the input data and computing the dot product between the values in the kernel and the input at each position. This process creates a feature map that represents detected features in the input.[2]\n\nKernels, also known as filters, are small matrices of weights that are learned during the training process. Each kernel is responsible for detecting a specific feature in the input data. The size of the kernel is a hyperparameter that affects the network's behavior.\n\nFor a 2D input \n\n\n\nx\n\n\n{\\displaystyle x}\n\n and a 2D kernel \n\n\n\nw\n\n\n{\\displaystyle w}\n\n, the 2D convolution operation can be expressed as:\n\n\n\ny\n[\ni\n,\nj\n]\n=\n\n∑\n\nm\n=\n0\n\n\n\nk\n\nh\n\n\n−\n1\n\n\n\n∑\n\nn\n=\n0\n\n\n\nk\n\nw\n\n\n−\n1\n\n\nx\n[\ni\n+\nm\n,\nj\n+\nn\n]\n⋅\nw\n[\nm\n,\nn\n]\n\n\n{\\displaystyle y[i,j]=\\sum _{m=0}^{k_{h}-1}\\sum _{n=0}^{k_{w}-1}x[i+m,j+n]\\cdot w[m,n]}\n\nwhere \n\n\n\n\nk\n\nh\n\n\n\n\n{\\displaystyle k_{h}}\n\n and \n\n\n\n\nk\n\nw\n\n\n\n\n{\\displaystyle k_{w}}\n\n are the height and width of the kernel, respectively.\n\nThis generalizes immediately to nD convolutions. Commonly used convolutions are 1D (for audio and text), 2D (for images), and 3D (for spatial objects, and videos).\n\nStride determines how the kernel moves across the input data. A stride of 1 means the kernel shifts by one pixel at a time, while a larger stride (e.g., 2 or 3) results in less overlap between convolutions and produces smaller output feature maps.\n\nPadding involves adding extra pixels around the edges of the input data. It serves two main purposes:\n\nCommon padding strategies include:\n\nCommon padding algorithms include:\n\nThe exact numbers used in convolutions is complicated, for which we refer to (Dumoulin and Visin, 2018)[3] for details.\n\nThe basic form of convolution as described above, where each kernel is applied to the entire input volume.\n\nDepthwise separable convolution separates the standard convolution into two steps: depthwise convolution and pointwise convolution. The depthwise separable convolution decomposes a single standard convolution into two convolutions: a depthwise convolution that filters each input channel independently and a pointwise convolution (\n\n\n\n1\n×\n1\n\n\n{\\displaystyle 1\\times 1}\n\n convolution) that combines the outputs of the depthwise convolution. This factorization significantly reduces computational cost.[4]\n\nIt was first developed by Laurent Sifre during an internship at Google Brain in 2013 as an architectural variation on AlexNet to improve convergence speed and model size.[4]\n\nDilated convolution, or atrous convolution, introduces gaps between kernel elements, allowing the network to capture a larger receptive field without increasing the kernel size.[5][6]\n\nTransposed convolution, also known as deconvolution, fractionally strided convolution, and upsampling convolution, is a convolution where the output tensor is larger than its input tensor. It's often used in encoder-decoder architectures for upsampling. It's used in image generation, semantic segmentation, and super-resolution tasks.\n\nThe concept of convolution in neural networks was inspired by the visual cortex in biological brains. Early work by Hubel and Wiesel in the 1960s on the cat's visual system laid the groundwork for artificial convolution networks.[7]\n\nAn early convolution neural network was developed by Kunihiko Fukushima in 1969. It had mostly hand-designed kernels inspired by convolutions in mammalian vision.[8] In 1979 he improved it to the Neocognitron, which learns all convolutional kernels by unsupervised learning (in his terminology, \"self-organized by 'learning without a teacher'\").[9][10]\n\nDuring the 1988 to 1998 period, a series of CNN were introduced by Yann LeCun et al., ending with LeNet-5 in 1998. It was an early influential CNN architecture for handwritten digit recognition, trained on the MNIST dataset, and was used in ATM.[11]\n\n(Olshausen & Field, 1996)[12] discovered that simple cells in the mammalian primary visual cortex implement localized, oriented, bandpass receptive fields, which could be recreated by fitting sparse linear codes for natural scenes. This was later found to also occur in the lowest-level kernels of trained CNNs.[13]: Fig 3 \n\nThe field saw a resurgence in the 2010s with the development of deeper architectures and the availability of large datasets and powerful GPUs. AlexNet, developed by Alex Krizhevsky et al. in 2012, was a catalytic event in modern deep learning.[13][14] In that year’s ImageNet competition, the AlexNet model achieved a 16% top-five error rate, significantly outperforming the next best entry, which had a 26% error rate. The network used eight trainable layers, approximately 650,000 neurons, and around 60 million parameters, highlighting the impact of deeper architectures and GPU acceleration on image recognition performance.[14]\n\nFrom the 2013 ImageNet competition, most entries adopted deep convolutional neural networks, building on the success of AlexNet. Over the following years, performance steadily improved, with the top-five error rate falling from 16% in 2012 and 12% in 2013 to below 3% by 2017, as networks grew increasingly deep.[14]\n",
  "concepts": [
    "Convolutional layer"
  ],
  "findings": [
    "Concepts",
    "Kernel",
    "Convolution",
    "Stride",
    "Padding",
    "Variants",
    "Standard",
    "Depthwise separable",
    "Dilated",
    "Transposed",
    "History",
    "See also",
    "References"
  ],
  "timestamp": "2025-04-11T10:20:17.124597"
}