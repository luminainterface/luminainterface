version: '3.8'

name: crawler-system

networks:
  backend:
    name: lumina-system_backend
    external: true

services:
  crawler:
    build:
      context: ./crawler
      dockerfile: Dockerfile
    environment:
      - REDIS_URL=redis://:02211998@redis:6379
      - QDRANT_URL=http://qdrant:6333
      - GRAPH_API_URL=http://graph-api:8829
      - CONCEPT_DICT_URL=http://concept-dictionary:8828
      - EMBEDDING_MODEL=nomic-embed-text
      - MAX_RETRIES=3
      - RETRY_DELAY=5
      - CACHE_TTL=86400
      - MAX_CONCURRENT_CRAWLS=5
      - MIN_RELEVANCE_SCORE=0.6
      - LOG_LEVEL=INFO
      - ENABLE_METRICS=true
      - API_HOST=0.0.0.0
      - API_PORT=8400
      - API_WORKERS=1
      - TRAINING_DATA_PATH=/app/training_data
      - LUMINA_API_KEY=${LUMINA_API_KEY:-changeme}
    volumes:
      - ./training_data:/app/training_data
    ports:
      - "8400:8400"  # API
      - "8000:8000"  # Metrics
    depends_on:
      redis:
        condition: service_healthy
      qdrant:
        condition: service_healthy
      graph-api:
        condition: service_healthy
      concept-dictionary:
        condition: service_healthy
    networks:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8400/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
        max_attempts: 3

  # Note: Redis and Qdrant are already running in the main system
  # We'll use the existing instances instead of creating new ones

volumes:
  # Note: Using existing volumes from the main system
  redis_data:
    external: true
  qdrant_data:
    external: true 