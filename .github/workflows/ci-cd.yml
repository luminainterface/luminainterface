name: Lumina Neural Network CI/CD

on:
  push:
    branches: [ main ]
    paths:
      - 'src/v*/**'
      - 'src/integration/**'
      - 'src/core/**'
      - 'src/tests/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'src/v*/**'
      - 'src/integration/**'
      - 'src/core/**'
      - 'src/tests/**'

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, 3.10]
        version: [v1, v2, v3, v4, v5, v6, v7, v7_5, v8, v9, v10, v11, v12]

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov
        
    - name: Run version-specific tests
      run: |
        cd src
        pytest tests/test_${{ matrix.version }}_*.py --cov=${{ matrix.version }} --cov-report=xml
        
    - name: Upload coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./src/coverage.xml
        fail_ci_if_error: true
        
  integration-test:
    runs-on: ubuntu-latest
    needs: test
    strategy:
      matrix:
        python-version: [3.9]
        
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov
        
    - name: Run integration tests
      run: |
        cd src
        pytest tests/test_integration_*.py --cov=integration --cov-report=xml
        
    - name: Upload integration coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./src/coverage.xml
        fail_ci_if_error: true
        
  version-bridge:
    runs-on: ubuntu-latest
    needs: integration-test
    strategy:
      matrix:
        python-version: [3.9]
        
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run version bridge tests
      run: |
        cd src
        python version_bridge_integration.py
        
  deploy:
    runs-on: ubuntu-latest
    needs: version-bridge
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install build twine
        
    - name: Build package
      run: |
        python -m build
        
    - name: Publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        twine upload dist/*
        
    - name: Deploy to staging
      run: |
        # Add deployment steps here
        echo "Deploying to staging environment..."
        
    - name: Notify deployment
      run: |
        # Add notification steps here
        echo "Deployment completed successfully" 