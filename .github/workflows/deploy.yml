name: Deploy

on:
  push:
    branches: [ main, 'v*-maintenance' ]
    paths:
      - 'src/v*/**'
      - 'src/version_bridge_integration.py'
      - 'setup.py'
  pull_request:
    branches: [ main, 'v*-maintenance' ]
    paths:
      - 'src/v*/**'
      - 'src/version_bridge_integration.py'
      - 'setup.py'

jobs:
  deploy:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9]
        
    steps:
    - uses: actions/checkout@v3
        
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install build twine
        
    - name: Determine version
      id: version
      run: |
        # Get changed version directories
        CHANGED_VERSIONS=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep -o 'src/v[0-9_]*/' | sort -u)
        
        # If no specific version changes, use current version from config
        if [ -z "$CHANGED_VERSIONS" ]; then
          CURRENT_VERSION=$(python -c "import yaml; print(yaml.safe_load(open('.github/repository.yml'))['version_system']['current_version'])")
          echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
        else
          # Use the highest version that was changed
          HIGHEST_VERSION=$(echo "$CHANGED_VERSIONS" | sort -V | tail -n1 | sed 's/src\///' | sed 's/\///')
          echo "version=$HIGHEST_VERSION" >> $GITHUB_OUTPUT
        fi
        
    - name: Build package
      run: |
        python -m build
        
    - name: Deploy to PyPI
      if: success() && github.ref == 'refs/heads/main'
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        twine upload dist/*
        
    - name: Deploy version-specific package
      if: success() && startsWith(github.ref, 'refs/heads/v') && endsWith(github.ref, '-maintenance')
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        # Create version-specific package
        VERSION=${{ steps.version.outputs.version }}
        python setup.py sdist bdist_wheel --version-suffix $VERSION
        twine upload dist/*
        
    - name: Update version bridge status
      run: |
        python -c "
        import yaml
        from src.version_bridge_integration import VersionBridgeIntegration
        
        # Load repository config
        with open('.github/repository.yml', 'r') as f:
            config = yaml.safe_load(f)
            
        # Initialize version bridge
        bridge = VersionBridgeIntegration()
        
        # Get current status
        status = bridge.get_bridge_status()
        
        # Update deployment status
        version = '${{ steps.version.outputs.version }}'
        config['version_system']['deployed_versions'] = config['version_system'].get('deployed_versions', [])
        if version not in config['version_system']['deployed_versions']:
            config['version_system']['deployed_versions'].append(version)
            
        # Save updated config
        with open('.github/repository.yml', 'w') as f:
            yaml.dump(config, f, default_flow_style=False)
        "
        
    - name: Commit deployment status
      if: success()
      run: |
        git config --global user.name 'GitHub Actions'
        git config --global user.email 'actions@github.com'
        git add .github/repository.yml
        git commit -m "Update deployment status for ${{ steps.version.outputs.version }} [skip ci]"
        git push 